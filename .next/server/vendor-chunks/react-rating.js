"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-rating";
exports.ids = ["vendor-chunks/react-rating"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-rating/lib/react-rating.esm.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-rating/lib/react-rating.esm.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction _typeof(obj) {\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nvar style = {\n    display: \"inline-block\",\n    borderRadius: \"50%\",\n    border: \"5px double white\",\n    width: 30,\n    height: 30\n};\nvar Style = {\n    empty: _objectSpread({}, style, {\n        backgroundColor: \"#ccc\"\n    }),\n    full: _objectSpread({}, style, {\n        backgroundColor: \"black\"\n    }),\n    placeholder: _objectSpread({}, style, {\n        backgroundColor: \"red\"\n    })\n};\n// Return the corresponding React node for an icon.\nvar _iconNode = function _iconNode(icon) {\n    // If it is already a React Element just return it.\n    if (/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().isValidElement(icon)) {\n        return icon;\n    } // If it is an object, try to use it as a CSS style object.\n    if (_typeof(icon) === \"object\" && icon !== null) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n            style: icon\n        });\n    } // If it is a string, use it as class names.\n    if (Object.prototype.toString.call(icon) === \"[object String]\") {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n            className: icon\n        });\n    }\n};\nvar RatingSymbol = /*#__PURE__*/ function(_React$PureComponent) {\n    _inherits(RatingSymbol, _React$PureComponent);\n    function RatingSymbol() {\n        _classCallCheck(this, RatingSymbol);\n        return _possibleConstructorReturn(this, _getPrototypeOf(RatingSymbol).apply(this, arguments));\n    }\n    _createClass(RatingSymbol, [\n        {\n            key: \"render\",\n            value: function render() {\n                var _iconContainerStyle;\n                var _this$props = this.props, index = _this$props.index, inactiveIcon = _this$props.inactiveIcon, activeIcon = _this$props.activeIcon, percent = _this$props.percent, direction = _this$props.direction, readonly = _this$props.readonly, onClick = _this$props.onClick, onMouseMove = _this$props.onMouseMove;\n                var backgroundNode = _iconNode(inactiveIcon);\n                var showbgIcon = percent < 100;\n                var bgIconContainerStyle = showbgIcon ? {} : {\n                    visibility: \"hidden\"\n                };\n                var iconNode = _iconNode(activeIcon);\n                var iconContainerStyle = (_iconContainerStyle = {\n                    display: \"inline-block\",\n                    position: \"absolute\",\n                    overflow: \"hidden\",\n                    top: 0\n                }, _defineProperty(_iconContainerStyle, direction === \"rtl\" ? \"right\" : \"left\", 0), _defineProperty(_iconContainerStyle, \"width\", \"\".concat(percent, \"%\")), _iconContainerStyle);\n                var style = {\n                    cursor: !readonly ? \"pointer\" : \"inherit\",\n                    display: \"inline-block\",\n                    position: \"relative\"\n                };\n                function handleMouseMove(e) {\n                    if (onMouseMove) {\n                        onMouseMove(index, e);\n                    }\n                }\n                function handleMouseClick(e) {\n                    if (onClick) {\n                        // [Supporting both TouchEvent and MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/Touch_events/Supporting_both_TouchEvent_and_MouseEvent)\n                        // We must prevent firing click event twice on touch devices.\n                        e.preventDefault();\n                        onClick(index, e);\n                    }\n                }\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n                    style: style,\n                    onClick: handleMouseClick,\n                    onMouseMove: handleMouseMove,\n                    onTouchMove: handleMouseMove,\n                    onTouchEnd: handleMouseClick\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n                    style: bgIconContainerStyle\n                }, backgroundNode), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", {\n                    style: iconContainerStyle\n                }, iconNode));\n            }\n        }\n    ]);\n    return RatingSymbol;\n}((react__WEBPACK_IMPORTED_MODULE_0___default().PureComponent)); // Define propTypes only in development. They will be void in production.\nvar Rating = /*#__PURE__*/ function(_React$PureComponent) {\n    _inherits(Rating, _React$PureComponent);\n    function Rating(props) {\n        var _this;\n        _classCallCheck(this, Rating);\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(Rating).call(this, props));\n        _this.state = {\n            // Indicates the value that is displayed to the user in the form of symbols.\n            // It can be either 0 (for no displayed symbols) or (0, end]\n            displayValue: _this.props.value,\n            // Indicates if the user is currently hovering over the rating element\n            interacting: false\n        };\n        _this.onMouseLeave = _this.onMouseLeave.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n        _this.symbolMouseMove = _this.symbolMouseMove.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n        _this.symbolClick = _this.symbolClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n        return _this;\n    }\n    _createClass(Rating, [\n        {\n            key: \"UNSAFE_componentWillReceiveProps\",\n            value: function UNSAFE_componentWillReceiveProps(nextProps) {\n                var valueChanged = this.props.value !== nextProps.value;\n                this.setState(function(prevState) {\n                    return {\n                        displayValue: valueChanged ? nextProps.value : prevState.displayValue\n                    };\n                });\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate(prevProps, prevState) {\n                // Ignore state update due to value changed from props.\n                // Usually originated through an onClick event.\n                if (prevProps.value !== this.props.value) {\n                    return;\n                } // When hover ends, call this.props.onHover with no value.\n                if (prevState.interacting && !this.state.interacting) {\n                    return this.props.onHover();\n                } // When hover over.\n                if (this.state.interacting) {\n                    this.props.onHover(this.state.displayValue);\n                }\n            }\n        },\n        {\n            key: \"symbolClick\",\n            value: function symbolClick(symbolIndex, event) {\n                var value = this.calculateDisplayValue(symbolIndex, event);\n                this.props.onClick(value, event);\n            }\n        },\n        {\n            key: \"symbolMouseMove\",\n            value: function symbolMouseMove(symbolIndex, event) {\n                var value = this.calculateDisplayValue(symbolIndex, event); // This call should cause an update only if the state changes.\n                // Mainly the first time the mouse enters and whenever the value changes.\n                // So DidComponentUpdate is NOT called for every mouse movement.\n                this.setState({\n                    interacting: !this.props.readonly,\n                    displayValue: value\n                });\n            }\n        },\n        {\n            key: \"onMouseLeave\",\n            value: function onMouseLeave() {\n                this.setState({\n                    displayValue: this.props.value,\n                    interacting: false\n                });\n            }\n        },\n        {\n            key: \"calculateDisplayValue\",\n            value: function calculateDisplayValue(symbolIndex, event) {\n                var percentage = this.calculateHoverPercentage(event); // Get the closest top fraction.\n                var fraction = Math.ceil(percentage % 1 * this.props.fractions) / this.props.fractions; // Truncate decimal trying to avoid float precission issues.\n                var precision = Math.pow(10, 3);\n                var displayValue = symbolIndex + (Math.floor(percentage) + Math.floor(fraction * precision) / precision); // ensure the returned value is greater than 0 and lower than totalSymbols\n                return displayValue > 0 ? displayValue > this.props.totalSymbols ? this.props.totalSymbols : displayValue : 1 / this.props.fractions;\n            }\n        },\n        {\n            key: \"calculateHoverPercentage\",\n            value: function calculateHoverPercentage(event) {\n                var clientX = event.nativeEvent.type.indexOf(\"touch\") > -1 ? event.nativeEvent.type.indexOf(\"touchend\") > -1 ? event.changedTouches[0].clientX : event.touches[0].clientX : event.clientX;\n                var targetRect = event.target.getBoundingClientRect();\n                var delta = this.props.direction === \"rtl\" ? targetRect.right - clientX : clientX - targetRect.left; // Returning 0 if the delta is negative solves the flickering issue\n                return delta < 0 ? 0 : delta / targetRect.width;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props = this.props, readonly = _this$props.readonly, quiet = _this$props.quiet, totalSymbols = _this$props.totalSymbols, value = _this$props.value, placeholderValue = _this$props.placeholderValue, direction = _this$props.direction, emptySymbol = _this$props.emptySymbol, fullSymbol = _this$props.fullSymbol, placeholderSymbol = _this$props.placeholderSymbol, className = _this$props.className, id = _this$props.id, style = _this$props.style, tabIndex = _this$props.tabIndex;\n                var _this$state = this.state, displayValue = _this$state.displayValue, interacting = _this$state.interacting;\n                var symbolNodes = [];\n                var empty = [].concat(emptySymbol);\n                var full = [].concat(fullSymbol);\n                var placeholder = [].concat(placeholderSymbol);\n                var shouldDisplayPlaceholder = placeholderValue !== 0 && value === 0 && !interacting; // The value that will be used as base for calculating how to render the symbols\n                var renderedValue;\n                if (shouldDisplayPlaceholder) {\n                    renderedValue = placeholderValue;\n                } else {\n                    renderedValue = quiet ? value : displayValue;\n                } // The amount of full symbols\n                var fullSymbols = Math.floor(renderedValue);\n                for(var i = 0; i < totalSymbols; i++){\n                    var percent = void 0; // Calculate each symbol's fullness percentage\n                    if (i - fullSymbols < 0) {\n                        percent = 100;\n                    } else if (i - fullSymbols === 0) {\n                        percent = (renderedValue - i) * 100;\n                    } else {\n                        percent = 0;\n                    }\n                    symbolNodes.push(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(RatingSymbol, _extends({\n                        key: i,\n                        index: i,\n                        readonly: readonly,\n                        inactiveIcon: empty[i % empty.length],\n                        activeIcon: shouldDisplayPlaceholder ? placeholder[i % full.length] : full[i % full.length],\n                        percent: percent,\n                        direction: direction\n                    }, !readonly && {\n                        onClick: this.symbolClick,\n                        onMouseMove: this.symbolMouseMove,\n                        onTouchMove: this.symbolMouseMove,\n                        onTouchEnd: this.symbolClick\n                    })));\n                }\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", _extends({\n                    id: id,\n                    style: _objectSpread({}, style, {\n                        display: \"inline-block\",\n                        direction: direction\n                    }),\n                    className: className,\n                    tabIndex: tabIndex,\n                    \"aria-label\": this.props[\"aria-label\"]\n                }, !readonly && {\n                    onMouseLeave: this.onMouseLeave\n                }), symbolNodes);\n            }\n        }\n    ]);\n    return Rating;\n}((react__WEBPACK_IMPORTED_MODULE_0___default().PureComponent)); // Define propTypes only in development.\nfunction noop() {}\nnoop._name = \"react_rating_noop\";\nvar RatingAPILayer = /*#__PURE__*/ function(_React$PureComponent) {\n    _inherits(RatingAPILayer, _React$PureComponent);\n    function RatingAPILayer(props) {\n        var _this;\n        _classCallCheck(this, RatingAPILayer);\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(RatingAPILayer).call(this, props));\n        _this.state = {\n            value: props.initialRating\n        };\n        _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n        _this.handleHover = _this.handleHover.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n        return _this;\n    }\n    _createClass(RatingAPILayer, [\n        {\n            key: \"UNSAFE_componentWillReceiveProps\",\n            value: function UNSAFE_componentWillReceiveProps(nextProps) {\n                this.setState({\n                    value: nextProps.initialRating\n                });\n            }\n        },\n        {\n            key: \"handleClick\",\n            value: function handleClick(value, e) {\n                var _this2 = this;\n                var newValue = this.translateDisplayValueToValue(value);\n                this.props.onClick(newValue); // Avoid calling setState if not necessary. Micro optimisation.\n                if (this.state.value !== newValue) {\n                    // If we have a new value trigger onChange callback.\n                    this.setState({\n                        value: newValue\n                    }, function() {\n                        return _this2.props.onChange(_this2.state.value);\n                    });\n                }\n            }\n        },\n        {\n            key: \"handleHover\",\n            value: function handleHover(displayValue) {\n                var value = displayValue === undefined ? displayValue : this.translateDisplayValueToValue(displayValue);\n                this.props.onHover(value);\n            }\n        },\n        {\n            key: \"translateDisplayValueToValue\",\n            value: function translateDisplayValueToValue(displayValue) {\n                var translatedValue = displayValue * this.props.step + this.props.start; // minimum value cannot be equal to start, since it's exclusive\n                return translatedValue === this.props.start ? translatedValue + 1 / this.props.fractions : translatedValue;\n            }\n        },\n        {\n            key: \"tranlateValueToDisplayValue\",\n            value: function tranlateValueToDisplayValue(value) {\n                if (value === undefined) {\n                    return 0;\n                }\n                return (value - this.props.start) / this.props.step;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props = this.props, step = _this$props.step, emptySymbol = _this$props.emptySymbol, fullSymbol = _this$props.fullSymbol, placeholderSymbol = _this$props.placeholderSymbol, readonly = _this$props.readonly, quiet = _this$props.quiet, fractions = _this$props.fractions, direction = _this$props.direction, start = _this$props.start, stop = _this$props.stop, id = _this$props.id, className = _this$props.className, style = _this$props.style, tabIndex = _this$props.tabIndex;\n                function calculateTotalSymbols(start, stop, step) {\n                    return Math.floor((stop - start) / step);\n                }\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Rating, {\n                    id: id,\n                    style: style,\n                    className: className,\n                    tabIndex: tabIndex,\n                    \"aria-label\": this.props[\"aria-label\"],\n                    totalSymbols: calculateTotalSymbols(start, stop, step),\n                    value: this.tranlateValueToDisplayValue(this.state.value),\n                    placeholderValue: this.tranlateValueToDisplayValue(this.props.placeholderRating),\n                    readonly: readonly,\n                    quiet: quiet,\n                    fractions: fractions,\n                    direction: direction,\n                    emptySymbol: emptySymbol,\n                    fullSymbol: fullSymbol,\n                    placeholderSymbol: placeholderSymbol,\n                    onClick: this.handleClick,\n                    onHover: this.handleHover\n                });\n            }\n        }\n    ]);\n    return RatingAPILayer;\n}((react__WEBPACK_IMPORTED_MODULE_0___default().PureComponent));\nRatingAPILayer.defaultProps = {\n    start: 0,\n    stop: 5,\n    step: 1,\n    readonly: false,\n    quiet: false,\n    fractions: 1,\n    direction: \"ltr\",\n    onHover: noop,\n    onClick: noop,\n    onChange: noop,\n    emptySymbol: Style.empty,\n    fullSymbol: Style.full,\n    placeholderSymbol: Style.placeholder\n}; // Define propTypes only in development.\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RatingAPILayer);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-rating/lib/react-rating.esm.js\n");

/***/ })

};
;